[script]
n0=alias JSONOpen {
n1=  var %switches = -
n2=  if (-* iswm $1) {
n3=    %switches = $1
n4=    tokenize 32 $2-
n5=  }
n6=  var %close = $false
n7=
n8=  var %com = JSONHandler:: $+ $1, %error, %file, %rem
n9=  var %init = function init(a,b){errortext="";data="";url=b ? b : "";method="GET";headers=[];parsedJSON={};status=a;fso=new ActiveXObject("Scripting.FileSystemObject")}
n10=  var %read = function readFile(filename){var ado=new ActiveXObject("ADODB.Stream");ado.CharSet="utf-8";ado.Open();ado.LoadFromFile(filename);if(!ado.EOF){data=ado.ReadText();}ado.close()}
n11=  var %json = "object"!==typeof JSON&&(JSON={});(function(){function m(a){return 10>a?"0"+a:a}function t(a){p.lastIndex=0;return p.test(a)?'"'+a.replace(p,function(a){var c=u[a];return"string"===typeof c?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function q(a,l){var c,d,h,r,g=e,f,b=l[a];b&&"object"===typeof b&&"function"===typeof b.toJSON&&(b=b.toJSON(a));"function"===typeof k&&(b=k.call(l,a,b));switch(typeof b){case "string":return t(b);case "number":return isFinite(b)?String(b):"null";case "boolean":case "null":return String(b);case "object":if(!b)return"null";e+=n;f=[];if("[object Array]"===Object.prototype.toString.apply(b)){r=b.length;for(c=0;c<r;c+=1)f[c]=q(c,b)||"null";h=0===f.length?"[]":e?"[\n"+e+f.join(",\n"+e)+"\n"+g+"]":"["+f.join(",")+"]";e=g;return h}if(k&&"object"===typeof k)for(r=k.length,c=0;c<r;c+=1)"string"===typeof k[c]&&(d=k[c],(h=q(d,b))&&f.push(t(d)+(e?": ":":")+h));else for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(h=q(d,b))&&f.push(t(d)+(e?": ":":")+h);h=0===f.length?"{}":e?"{\n"+e+f.join(",\n"+e)+"\n"+g+"}":"{"+f.join(",")+"}";e=g;return h}}"function"!==typeof Date.prototype.toJSON&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+m(this.getUTCMonth()+1)+"-"+m(this.getUTCDate())+"T"+m(this.getUTCHours())+":"+m(this.getUTCMinutes())+":"+m(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(){return this.valueOf()});var s,p,e,n,u,k;"function"!==typeof JSON.stringify&&(p=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,u={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},JSON.stringify=function(a,l,c){var d;n=e="";if("number"===typeof c)for(d=0;d<c;d+=1)n+=" ";else"string"===typeof c&&(n=c);if((k=l)&&"function"!==typeof l&&("object"!==typeof l||"number"!==typeof l.length))throw Error("JSON.stringify");return q("",{"":a})});"function"!==typeof JSON.parse&&(s=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,JSON.parse=function(a,e){function c(a,d){var g,f,b=a[d];if(b&&"object"===typeof b)for(g in b)Object.prototype.hasOwnProperty.call(b,g)&&(f=c(b,g),void 0!==f?b[g]=f:delete b[g]);return e.call(a,d,b)}var d;a=String(a);s.lastIndex=0;s.test(a)&&(a=a.replace(s,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return d=eval("("+a+")"),"function"===typeof e?c({"":d},""):d;throw new SyntaxError("JSON.parse");})})();
n12=  var %xhr = function xhr(){var a,b=['MSXML2.SERVERXMLHTTP.6.0','MSXML2.SERVERXMLHTTP.3.0','MSXML2.SERVERXMLHTTP','MSXML2.XMLHTTP.6.0','MSXML2.XMLHTTP.3.0','Microsoft.XMLHTTP'],c;for(a=0;a<b.length;a++){try{c=new ActiveXObject(b[a]);break}catch(e){}}if(typeof c==="undefined"){errortext = "Unable to locate an XMLHTTP object for use"}else{c.open(method,url,false);for(a=0;a<headers.length;a++){c.setRequestHeader(headers[a][0],headers[a][1])}c.send(data);if(c.status!==200){errortext="Unable to retrieve data - Server Error: " + c.status}else{status="Parsed";try{parsedJSON=JSON.parse(c.responseText)}catch(ee){errortext="Unable to parse Retrieved Data"}}}}
n13=
n14=  if (!$regex(%switches, /^-[ufbwd]*$/)) {
n15=    %error = Invalid switches specified
n16=  }
n17=  elseif ($regex(%switches, /([ufbwd])\1/)) {
n18=    %error = Duplicate switch specified ( $+ $regml(1) $+ )
n19=  }
n20=  elseif ($regex(%switches, /([ufb])/g) > 1) {
n21=    %error = Conflicting switches specified (- $+ $regml(1) $+ , - $+ $regml(2) $+ $iif($regml(3), $chr(44) - $+ $v1) $+ )
n22=  }
n23=  elseif (w isin %switches && u !isin %switches) {
n24=    %error = Invalid switch (-w is only for use with -u)
n25=  }
n26=  elseif ($0 < 2) {
n27=    %error = Required parameters missing
n28=  }
n29=  elseif (!$regex($1,/^[a-z\d_.-]+$/i)) {
n30=    %error = Invalid name specified (Can only contant letters, numbers, _, ., and -)
n31=  }
n32=  elseif ($com(%com)) {
n33=    %error = Specified name in use
n34=  }
n35=  elseif (u isin %switches && $0 > 2) {
n36=    %error = Invalid URL specified. (Contains Spaces: $2-)
n37=  }
n38=  elseif (f isin %switches && !$isfile($2-)) {
n39=    %error = File not found: $2-
n40=  }
n41=  elseif (b isin %switches && &* !iswm $2) {
n42=    %error = Invalid binary variable specified (No '&' Prefix)
n43=  }
n44=  elseif (b isin %switches && $0 > 2) {
n45=    %error = Invalid binary variable specified (Contains Spaces: $2-)
n46=  }
n47=  elseif (b isin %switches && $bvar($2, 0) < 1) {
n48=    %error = Invalid binary variable specified (No content)
n49=  }
n50=  else {
n51=    %close = $true
n52=    if (!$JSON::ComOpen(%com, MSScriptControl.ScriptControl) || $comerr) {
n53=      %error = Unable to create an instance of MSScriptControl.ScriptControl
n54=    }
n55=    elseif (!$com(%com, language, 4, bstr, jscript) || $comerr) {
n56=      %error = Unable to set ScriptControl's language to Javascript
n57=    }
n58=    elseif (!$com(%com, addcode, 1, bstr, %init) || $comerr) {
n59=      %error = Unable to add init() to ScriptControl
n60=    }
n61=    elseif (!$com(%com, addcode, 1, bstr, %xhr) || $comerr) {
n62=      %error = Unable to add xhr() to ScriptControl
n63=    }
n64=    elseif (!$com(%com, addcode, 1, bstr, %read) || $comerr) {
n65=      %error = Unable to add readFile() to ScriptControl
n66=    }
n67=    elseif (!$com(%com, ExecuteStatement, 1, bstr, %JSON) || $comerr) {
n68=      %error = Unable to Initalize the JSON parser object
n69=    }
n70=    elseif (!$com(%com, ExecuteStatement, 1, bstr, $iif(u isin %switches, $+(init,$chr(40), "XHR", $chr(44), $qt($JSON::Escape($2)),$chr(41)), $+(init,$chr(40), "Parsed", $chr(44), "", $chr(41)))) || $comerr) {
n71=      %error = Unable to initalize variables for ScriptControl
n72=    }
n73=    else {
n74=      if (u isin %switches) {
n75=        if (w !isin %switches) {
n76=          var %i = $com(%com, ExecuteStatement, 1, bstr, $+(xhr,$chr(40),$chr(41)))
n77=          if (!%i || $comerr) {
n78=            %error = Unable to retrieve data from $2 :: $com(%com).error :: $com(%com).errortext
n79=          }
n80=          elseif (!$com(%com, eval, 1, bstr, errortext) || $com(%com).result) {
n81=            %error = Unable to retrieve data $+ $iif($v1,: $v1,)
n82=          }
n83=        }
n84=      }
n85=      else {
n86=        %file = $JSON::File($1)
n87=        if (f isin %switches) {
n88=          %file = $longfn($2)
n89=        }
n90=        elseif (b isin %switches) {
n91=          bwrite $qt(%file) 0 -1 $2
n92=          %rem = $true
n93=        }
n94=        else {
n95=          write -n $qt(%file) $2-
n96=          %rem = $true
n97=        }
n98=        if (!$com(%com, ExecuteStatement, 1, bstr, $JSON::Funct(readFile, $qt($JSON::Escape(%file)))) || $comerr) {
n99=          %error = Unable to read contents of data-passing file
n100=        }
n101=        elseif (!$com(%com, ExecuteStatement, 1, bstr, $JSON::Funct(parsedJSON=JSON.parse,data)) || $comerr) {
n102=          %error = Unable to parse data into valid JSON
n103=        }
n104=      }
n105=      if (d isin %switches) {
n106=        $+(.timer,%com) 1 0 JSONClose $1
n107=      }
n108=    }
n109=  }
n110=  :error
n111=  %error = $iif($error, $v1, %error)
n112=  if (%rem && %file && $isfile(%file)) {
n113=    .remove $qt(%file)
n114=  }
n115=  if (%error) {
n116=    if ($timer(%com)) { $+(.timer,%com) off }
n117=    if (%close && $com(%com)) {
n118=      set -eu0 $+(%,%com,::error) %error
n119=      set -eu0 %JSONError %error
n120=      .comclose %com
n121=    }
n122=    else {
n123=      set -eu0 %JSONError %error
n124=    }
n125=  }
n126=  else {
n127=    unset $+(%,%com,::error)
n128=    unset %JSONError
n129=  }
n130=}
n131=alias -l JSONError { return %JSONError }
n132=
n133=alias JSONURLOption {
n134=  var %com = JSONHandler:: $+ $1, %error, %head, %value, %x = 2
n135=
n136=  if (!$com(%com)) {
n137=    return
n138=  }
n139=  unset % [ $+ [ %com ] $+ ] ::error
n140=  if ($0 < 3) {
n141=    %error = Missing parameters
n142=  }
n143=  elseif (!$com(%com, eval, 1, bstr, status) || $com(%com).result != XHR) {
n144=    %error = HTTP Request already completed or wasn't specified
n145=  }
n146=  elseif ($2 == method) {
n147=    if (!$regex($3-, /^(?:GET|POST|PUT|DELETE)$/i)) {
n148=      %error = Invalid HTTP Request method Specified: $3-
n149=    }
n150=    elseif (!$com(%com, ExecuteStatement, 1, bstr, method=" $+ $3 $+ ") || $comerr) {
n151=      %error = Unable to set HTTP Request method
n152=    }
n153=  }
n154=  else {
n155=    if (!$com(%com, ExecuteStatement, 1, bstr, $JSON::Funct(headers.push,[ $+ $qt($JSON::Escape($2)), $qt($JSON::Escape($3-)) $+ ])) || $comerr) {
n156=      %error = Unable to set HTTP Header: %head $+ : $+ %value
n157=    }
n158=  }
n159=  :error
n160=  %error = $iif($error, $v1, %error)
n161=  if (%error) {
n162=    reseterror
n163=    set -e $+(%,%com,::Error) %error
n164=  }
n165=}
n166=alias JSONGet {
n167=  var %switches -
n168=  if (-* iswm $1) {
n169=    %switches = $1
n170=    tokenize 32 $2-
n171=  }
n172=  var %com = JSONHandler:: $+ $1
n173=  var %file = $JSON::File($1)
n174=  var %error
n175=  var %rem
n176=  if ($com(%com)) {
n177=    if ($com(%com, eval, 1, bstr, status) && $com(%com).result !== XHR) {
n178=      %error = HTTP Request already completed or wasn't specified
n179=    }
n180=    elseif (!$regex(%switches, /^-[bf]*$/)) {
n181=      %error = Invalid switches specified
n182=    }
n183=    elseif ($regex(%switches, /([bf])\1/)) {
n184=      %error = Duplicate switch specified ( $+ $regml(1) $+ )
n185=    }
n186=    elseif ($regex(%switches, /([bf])/g) > 1) {
n187=      %error = Conflicting switches specified (- $+ $regml(1) $+ , - $+ $regml(2) $+ )
n188=    }
n189=    elseif (b isin %switches && &* !iswm $2) {
n190=      %error = Invalid binary variable specified (No '&' Prefix)
n191=    }
n192=    elseif (b isin %switches && $0 > 2) {
n193=      %error = Invalid binary variable specified (Contains Spaces: $2-)
n194=    }
n195=    elseif (f isin %switches && !$isfile($2-)) {
n196=      %error = File not found: $2-
n197=    }
n198=    else {
n199=      if (b isin %switches && $bvar($2,0)) {
n200=        bwrite $qt(%file) 0 -1 $2
n201=        %rem = $true
n202=      }
n203=      elseif (f isin %switches) {
n204=        %file = $2-
n205=      }      
n206=      elseif ($2-) {
n207=        write -n $qt(%file) $2-
n208=        %rem = $true
n209=      }
n210=      %file = $longfn(%file)
n211=      if ($isfile(%file) && (!$com(%com, ExecuteStatement, 1, bstr, $JSON::Funct(readFile,$qt($JSON::Escape(%file)))) || $comerr)) {
n212=        %error = Unable to pass data to JSON Handler
n213=      }
n214=      elseif (!$com(%com, ExecuteStatement, 1, bstr, xhr $+ $chr(40) $+ $chr(41)) || $comerr) {
n215=        %error = Unable to retrieve data from specified URL :: $com(%com).error :: $com(%com).errortext    
n216=      }
n217=      elseif (!$com(%com, eval, 1, bstr, errortext) || $com(%com).result) {
n218=        %error = $v1
n219=      }
n220=      if (%rem && $isfile(%file)) { .remove %file }
n221=    }
n222=  }
n223=  :error
n224=  %error = $iif($error, $v1, %error)
n225=  if (%error) {
n226=    reseterror
n227=    set -eu0 $+(%,%com,::Error) %error
n228=  }
n229=}
n230=alias JSON {
n231=  var %com, %x = 1, %i = 0, %get = parsedJSON, %tok, %res, %LTLError
n232=  if ($regex($1,/^\d+$/) && $0 === 1) {
n233=    while ($com(%x)) {
n234=      if (JSONHandler::* iswm $v1) {
n235=        %com = $v2
n236=        inc %i
n237=        if (%i === $1) { return $mid(%com,14-) }
n238=      }
n239=      inc %x
n240=    }
n241=    return $iif($1 == 0, %i)
n242=  }
n243=  elseif ($regex($1, /^JSONHandler::CHILD::([^:]+)::(.*)$/)) {
n244=    %com = $regml(1)
n245=    %get = $regml(2)
n246=  }
n247=  else {
n248=    %com = JSONHandler:: $+ $1
n249=  }
n250=  if ($com(%com)) {
n251=    if ($0 == 1) {
n252=      if ($prop == isChild) {
n253=        return $iif($regex($1, /^JSONHandler::CHILD::([^:]+)::(.*)$/), $true, $false)
n254=      }
n255=      elseif ($prop == error || $prop === errormsg) {
n256=        return $(,$+(%,%com,::error))
n257=      }
n258=      elseif ($com($1)) {
n259=        return $1
n260=      }
n261=    }
n262=    elseif (!$com(%com, eval, 1, bstr, status) || $com(%com).result != parsed) {
n263=      set -eu0 $+(%,%com,::error) JSON Handler waiting for HTTP Request
n264=    }
n265=    else {
n266=      %x = 2
n267=      while (%x <= $0) {
n268=        %tok = $(,$ $+ %x)
n269=        if (!$regex(%tok, /^\d+$/)) {
n270=          %tok = $qt($replace(%tok,\,\\,",\"))
n271=        }
n272=        %get = $+(%get,[,%tok,])
n273=        inc %x
n274=      }
n275=      if (!$com(%com, eval, 1, bstr, %get) || $comerr) {
n276=        set -eu0 $+(%,%com,::error) Invalid Item|index specified
n277=      }
n278=      else {
n279=        %LLLError = $true
n280=        %res = $com(%com).result
n281=        %LLLError = $false
n282=        if (%res == [object]) {
n283=          return JSONHandler::CHILD:: $+ $1 $+ :: $+ %get
n284=        }
n285=        else {
n286=          return %res
n287=        }
n288=      }
n289=    }
n290=  }
n291=  return
n292=  :error
n293=  set -eu0 $+(%,%com,::error) $iif(%LLLError, Line to Long; truncated at 4000 bytes, $error)
n294=  reseterror
n295=  if (%LLLError) {
n296=    %res = $left($com(%com).result, 4000)
n297=  }
n298=}
n299=alias JSONClose {
n300=  var %com = JSONHandler:: $+ $1
n301=  unset % [ $+ [ %com ] $+ ] ::*
n302=  if ($com(%com)) { .comclose $v1 }
n303=  if ($timer(%com)) { $+(.timer,%com) off }
n304=}
n305=alias JSONList {
n306=  var %x = 1, %i = 0
n307=  while ($com(%x)) {
n308=    if (JSONHandler::* iswm $v1) {
n309=      inc %i
n310=      echo $color(info text) -a * # $+ %i : $regsubex($v2, /^JSONHandler::/,)
n311=    }
n312=    inc %x
n313=  }
n314=  if (!%i) {
n315=    echo $color(info text) -a * No active JSON handlers
n316=  }  
n317=}
n318=on *:Start: unset %JSONHandler::*
n319=alias -l JSON::ComOpen { .comopen $1- | if ($com($1) && !$comerr) { return $true } | :error | reseterror | if ($com($1)) { .comclose $1 } }
n320=alias -l JSON::Escape { return $replace($1,\,\\,",\") }
n321=alias -l JSON::File { var %a = 1 | while ($isfile(JSON $+ $1 $+ %a $+ .json)) { inc %a } | return $+(JSON, $1, %a, .json) }
n322=alias -l JSON::Funct { var %a = $1 $+ $chr(40), %i = 1 | while (%i < $0) { inc %i | %a = $+(%a,$iif(%i > 2,$chr(44)),$(, $ $+ %i)) } | return %a $+ $chr(41) }
